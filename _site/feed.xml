<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>daqiuqu's blog</title>
    <description>This is a personal blog to record some thoughts and tec articles.
</description>
    <link>http://daqiuqu.com/blog/</link>
    <atom:link href="http://daqiuqu.com/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 01 Feb 2015 08:41:58 +0800</pubDate>
    <lastBuildDate>Sun, 01 Feb 2015 08:41:58 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>利用vundle管理vim插件!</title>
        <description>&lt;p&gt;想用vim来看swift代码，但是没有swift语法高亮，查了下可以用插件解决，而vim下管理插件的神器要数vundle了，vundle也就是vim bundle。
方法其实很简单，如果没有git的话首先安装git，&lt;code&gt;apt-get install git&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;1、安装完成后从github上下载vundle：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone http://github.com/gmarik/vundle.git ~/.vim/bundle/vundle&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2、接下来主要是配置.vimrc，从vundle的README.md可以看到需要的修改，修改后运行vim的时候就会首先加载.vimrc中的配置，不明白怎么配置的话可以先参考别人的，比如我参考了beiyuu的&lt;a href=&quot;https://github.com/beiyuu/vimfiles/blob/master/_vimrc&quot;&gt;vimrc&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;3、之后运行vim，执行:BundleInstall就可以安装.vimrc里规定的插件。&lt;/p&gt;

&lt;p&gt;vundle提供了以下几种插件安装方法：&lt;/p&gt;

&lt;p&gt;如果这是一个在github的repository的话，比如我安装的swift语法高亮插件，采用这种形式：&lt;code&gt;Bundle &quot;toyamarinyon/vim-swift&quot;&lt;/code&gt;，这个插件应该是目前github上同类型里starred最多的。&lt;/p&gt;

&lt;p&gt;如果是一个git插件，但是没有托管在github，采用这种形式：&lt;code&gt;Bundle 'git://git.wincent.com/command-t.git'&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果是一个本地的git插件，采用这种形式：&lt;code&gt;Bundle file:///home/gmarik/path/to/plugin&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;vundle共提供了这几个命令：&lt;/p&gt;

&lt;p&gt;BundleInstall：安装插件&lt;/p&gt;

&lt;p&gt;BundleList:当前插件列表&lt;/p&gt;

&lt;p&gt;BundleClean:卸载不在列表中的插件&lt;/p&gt;

&lt;p&gt;BundleInstall！：更新插件&lt;/p&gt;

&lt;p&gt;运用这几个命令，就可以轻松的利用vundle管理vim插件了，插件都存放在&lt;code&gt;~/.vim/bundle/&lt;/code&gt;目录下。&lt;/p&gt;

&lt;p&gt;主要参考了vundle readme和beiyuu的vimrc，谢谢贡献！&lt;/p&gt;

</description>
        <pubDate>Sat, 31 Jan 2015 16:39:19 +0800</pubDate>
        <link>http://daqiuqu.com/blog/vundle/vim/swift/2015/01/31/manage-vim-plugin-by-vundle.html</link>
        <guid isPermaLink="true">http://daqiuqu.com/blog/vundle/vim/swift/2015/01/31/manage-vim-plugin-by-vundle.html</guid>
        
        
        <category>vundle</category>
        
        <category>vim</category>
        
        <category>swift</category>
        
      </item>
    
      <item>
        <title>how to build a blog by github and jekyll!</title>
        <description>&lt;p&gt;blog终于初步可以运行了，作为第一篇正式的文章，记录一下自己blog的搭建过程。
   搭建环境：ubuntu14.04&lt;/p&gt;

&lt;p&gt;1、环境搭建和安装&lt;/p&gt;

&lt;p&gt;首先安装git、ruby、gem、jekyll等，可以直接apt-get install安装：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;apt-get install git
apt-get install ruby
apt-get install ruby-dev
apt-get install gem&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这时可以用 &lt;code&gt;ruby -v&lt;/code&gt; 和 &lt;code&gt;gem -v&lt;/code&gt; 检查一下是否安装成功，安装了什么版本。&lt;/p&gt;

&lt;p&gt;此时通过&lt;code&gt;gem sources list&lt;/code&gt;可以查看到gem默认的源应该是&lt;code&gt;http://rubygems.org&lt;/code&gt;，在中国此源速度较慢，更换为国内淘宝源，方法如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gem sources -a http://ruby.taobao.org
gem sources --remove http://rubygems.org&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;即先添加国内源，再将默认的gem源移除，此时再用&lt;code&gt;gem sources list&lt;/code&gt;查看源的设置是否正确。设置完成后安装jekyll：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gem install jekyll&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;同之前一样，安装完成后用&lt;code&gt;jekyll -v&lt;/code&gt;检查一下是否安装成功。&lt;/p&gt;

&lt;p&gt;2、利用jekyll建立基本的blog&lt;/p&gt;

&lt;p&gt;这时安装工作基本结束，为自己的blog建立一个存放目录，&lt;code&gt;cd&lt;/code&gt;到该目录之后用jekyll初始化一些基本的文件：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll new UserName&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我这里出现错误&lt;code&gt;ExecJS cannot find a JavaScript runtime&lt;/code&gt;，此时运行&lt;code&gt;apt-get install nodejs&lt;/code&gt;安装Node.js解决该问题，安装后重新运行该命令即建立了一个以UserName命名的文件夹，里面包含一些初始化的文件。
   其中&lt;code&gt;_layout&lt;/code&gt;目录用于存放模板，里面有default.html和post.html两个模板；&lt;code&gt;_post&lt;/code&gt;目录用于存放博客的文章，里面有一个markdown格式的文件就是我们稍后会在网站上看到的第一篇文章；而&lt;code&gt;_post&lt;/code&gt;目录下的文章会在&lt;code&gt;_site&lt;/code&gt;目录下生成网页。这里还需要注意一些文件，比如&lt;code&gt;_config.yml&lt;/code&gt;，其中包含了一些基本的配置选项，具体内容可以参照[Jekyll官网][jekyll-config]。其它目录和文件暂不介绍。&lt;/p&gt;

&lt;p&gt;实际上这时候你的个人网站已经可以在本地运行，在当前的文件夹输入：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果之前操作没有问题的话应该可以看到&lt;code&gt;server running&lt;/code&gt;字样，此时可以直接通过http://127.0.0.1:4000/本地访问自己的网站了，是不是很容易。&lt;/p&gt;

&lt;p&gt;现在我们开始写自己的第一个网页，如上面所说，在&lt;code&gt;_post&lt;/code&gt;目录建立一个文件，命名为&lt;code&gt;yy-mm-dd-titlename.markdown&lt;/code&gt;，jekyll就会根据文章的标题来创建文件夹，基本就是&lt;code&gt;/yy/mm/dd/titlename.html&lt;/code&gt;的样子，我们模仿jekyll给出的例子来写第一个网页，在&lt;code&gt;_post&lt;/code&gt;文件夹下新建文件&lt;code&gt;2015-01-27-hello.markdown&lt;/code&gt;，内容如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;---
layout: post
title: hello
---

HELLO WORLD!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;刷新一下本地的网页，应该就看到我们的第一篇文章了。&lt;/p&gt;

&lt;p&gt;3、提交到github&lt;/p&gt;

&lt;p&gt;在本地的blog固然能给自己起到记录的作用，不过blog本来就是大家互相交流提高的地方。感谢github给我们提供了这样的方法，把blog托管到github之后，出色的版本控制也使我们不必害怕文章的丢失。
   首先在jekyll目录下运行命令:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;创建一个名为gh-pages的分支：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout --orphan gh-pages&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里建立的分支名称必须是&lt;code&gt;gh-pages&lt;/code&gt;，注意不要写错。&lt;/p&gt;

&lt;p&gt;之后就是本地提交和发布了，首先在本地提交：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add .
git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Blog init&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;首先将当前目录加入暂存区，之后本地提交第一个版本”Blog init”是第一次提交的日志，内容可以是任何你想写的东西。&lt;/p&gt;

&lt;p&gt;接下来上传到github：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git remote add origin https://github.com/github-user-name/blog-name.git
git push origin gh-pages&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样就完成了提交，访问github-user-name.github.io应该就可以查看到刚才本地调试的网页了。&lt;/p&gt;

&lt;p&gt;以上就是我大概的安装过程，如果有什么错误欢迎大家指出，谢谢！&lt;/p&gt;

&lt;p&gt;安装过程中参考了很多前人经验，包括但不限于：&lt;a href=&quot;http://www.worldhello.net/gotgithub/03-project-hosting/050-homepage.html&quot;&gt;蒋鑫的博客&lt;/a&gt;，&lt;a href=&quot;http://segmentfault.com/blog/skyinlayer/1190000000406011&quot;&gt;天镶的博客&lt;/a&gt;，&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jekyll官网&lt;/a&gt;，&lt;a href=&quot;http://jason1114.github.io/articles/2013/09/11/how-to-build-a-personal-homepage-with-github-pages-and-jekyll.html&quot;&gt;小木匠的博客&lt;/a&gt;，谢谢大家共享的知识和提供的工具。&lt;/p&gt;

</description>
        <pubDate>Tue, 27 Jan 2015 18:43:35 +0800</pubDate>
        <link>http://daqiuqu.com/blog/jekyll/update/2015/01/27/setup-a-blog-by-github-and-jekyll.html</link>
        <guid isPermaLink="true">http://daqiuqu.com/blog/jekyll/update/2015/01/27/setup-a-blog-by-github-and-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 27 Jan 2015 06:28:35 +0800</pubDate>
        <link>http://daqiuqu.com/blog/jekyll/update/2015/01/27/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://daqiuqu.com/blog/jekyll/update/2015/01/27/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>hello-jekyll</title>
        <description>&lt;p&gt;Hello jekyll!&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Jan 2015 00:00:00 +0800</pubDate>
        <link>http://daqiuqu.com/blog/2015/01/26/hello.html</link>
        <guid isPermaLink="true">http://daqiuqu.com/blog/2015/01/26/hello.html</guid>
        
        
      </item>
    
  </channel>
</rss>
